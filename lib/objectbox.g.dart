// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'features/contacts/data/models/contact_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 6710870472237389569),
      name: 'ContactModel',
      lastPropertyId: const obx_int.IdUid(10, 6760589252008131277),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7894176654053882959),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 428242819342155696),
            name: 'contactID',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(7, 4134830112461790379)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1518868917494940466),
            name: 'firstName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2671882194143879513),
            name: 'lastName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6691486623540154041),
            name: 'phoneNumber',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2337798589158418290),
            name: 'streetAddress1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 9077609147710124561),
            name: 'streetAddress2',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4436707132481651671),
            name: 'city',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 491745691157431762),
            name: 'state',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 6760589252008131277),
            name: 'zipCode',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 6710870472237389569),
      lastIndexId: const obx_int.IdUid(7, 4134830112461790379),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [4350236757225545660],
      retiredIndexUids: const [
        4788443931119281205,
        7565404166243050380,
        2328051538653162854,
        943446603001662575,
        4172305053465114874
      ],
      retiredPropertyUids: const [
        2788435871241652493,
        1215065144023697562,
        5687091989650867676,
        4643923104021641402,
        6498196564557853855,
        3674664532661124932,
        5305987321407732014,
        2108199212380822652,
        785839783819721538,
        6053822086714351362
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    ContactModel: obx_int.EntityDefinition<ContactModel>(
        model: _entities[0],
        toOneRelations: (ContactModel object) => [],
        toManyRelations: (ContactModel object) => {},
        getId: (ContactModel object) => object.id,
        setId: (ContactModel object, int id) {
          object.id = id;
        },
        objectToFB: (ContactModel object, fb.Builder fbb) {
          final contactIDOffset = fbb.writeString(object.contactID);
          final firstNameOffset = fbb.writeString(object.firstName);
          final lastNameOffset = fbb.writeString(object.lastName);
          final phoneNumberOffset = fbb.writeString(object.phoneNumber);
          final streetAddress1Offset = fbb.writeString(object.streetAddress1);
          final streetAddress2Offset = fbb.writeString(object.streetAddress2);
          final cityOffset = fbb.writeString(object.city);
          final stateOffset = fbb.writeString(object.state);
          final zipCodeOffset = fbb.writeString(object.zipCode);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, contactIDOffset);
          fbb.addOffset(2, firstNameOffset);
          fbb.addOffset(3, lastNameOffset);
          fbb.addOffset(4, phoneNumberOffset);
          fbb.addOffset(5, streetAddress1Offset);
          fbb.addOffset(6, streetAddress2Offset);
          fbb.addOffset(7, cityOffset);
          fbb.addOffset(8, stateOffset);
          fbb.addOffset(9, zipCodeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final contactIDParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final firstNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final lastNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final phoneNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final streetAddress1Param =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final streetAddress2Param =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final cityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final stateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final zipCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final object = ContactModel(
              id: idParam,
              contactID: contactIDParam,
              firstName: firstNameParam,
              lastName: lastNameParam,
              phoneNumber: phoneNumberParam,
              streetAddress1: streetAddress1Param,
              streetAddress2: streetAddress2Param,
              city: cityParam,
              state: stateParam,
              zipCode: zipCodeParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ContactModel] entity fields to define ObjectBox queries.
class ContactModel_ {
  /// See [ContactModel.id].
  static final id =
      obx.QueryIntegerProperty<ContactModel>(_entities[0].properties[0]);

  /// See [ContactModel.contactID].
  static final contactID =
      obx.QueryStringProperty<ContactModel>(_entities[0].properties[1]);

  /// See [ContactModel.firstName].
  static final firstName =
      obx.QueryStringProperty<ContactModel>(_entities[0].properties[2]);

  /// See [ContactModel.lastName].
  static final lastName =
      obx.QueryStringProperty<ContactModel>(_entities[0].properties[3]);

  /// See [ContactModel.phoneNumber].
  static final phoneNumber =
      obx.QueryStringProperty<ContactModel>(_entities[0].properties[4]);

  /// See [ContactModel.streetAddress1].
  static final streetAddress1 =
      obx.QueryStringProperty<ContactModel>(_entities[0].properties[5]);

  /// See [ContactModel.streetAddress2].
  static final streetAddress2 =
      obx.QueryStringProperty<ContactModel>(_entities[0].properties[6]);

  /// See [ContactModel.city].
  static final city =
      obx.QueryStringProperty<ContactModel>(_entities[0].properties[7]);

  /// See [ContactModel.state].
  static final state =
      obx.QueryStringProperty<ContactModel>(_entities[0].properties[8]);

  /// See [ContactModel.zipCode].
  static final zipCode =
      obx.QueryStringProperty<ContactModel>(_entities[0].properties[9]);
}
